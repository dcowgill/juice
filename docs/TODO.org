#+TYP_TODO: MAYBE IMPORTANT NEXT STARTED WAITING DONE
#+STARTUP: overview

* NEXT Ensure that the interface of the standard form widgets are consistent
  For example, the key-value ordering for radio group and select list are different
  and some widgets have a set_data method, while others have a set_options method.
* NEXT Change proj settings to just be a dictionary--that's way more flexible after all
* NEXT Add server-side validation procedure
* IMPORTANT Add facility to ignore success or failure functions when rpc finishes
  This will be important when adding rpc-based form validation. If the user
  submits the form, we shouldn't honor the request.
* IMPORTANT Move things back into core
  For example ignore_stale_calls
* IMPORTANT Remove dead widgets
<<<<<<< HEAD:docs/TODO.org
* IMPORTANT Add support for singleton widgets
=======
* IMPORTANT support alternative page paths
    It should be possible to specify alternative page paths. For example:

        juice.page.define(
            {name: 'user_profile',
             path: '<<username>>/',
             alternative_paths: {
                 foo: 'users/<<username>>/',
                 bar: ['profile/', {username: 'u'}]
             },
             parameters: {username: {re: '\\w+'}},
             // ...
            });

    That defines a page named "user_profile" whose default path is a dynamic
    path containing the username parameter (regexp must be specified in the
    parameters attribute), and with two alternative paths, the second of which
    expects a query string arg named "u" that will be passed to the page as
    "username". The page's url() method will, by default, return the default
    path, but can be passed a second argument naming an alternative path, e.g.
    proj.pages.user_profile.url({username:"bob", "foo").

* IMPORTANT support optional page parameters and default values
    E.g. (pseudo-code):

        juice.page.define(
            {name: 'notes',
             title: 'Notes',
             path: ['notes/', {note_id: 'n, page: 'p}],
             alternative_paths: {},
             parameters: {note_id: {re: '\\d+', default_value: undefined},
                          page: {re: '\\d+', default_value: 1}},
             // ...
            });

    That defines a page named "notes" accessible via "notes/" that accepts two
    optional query string arguments, "p" and "n". Both must match the regular
    expression /^\d+$/. They are optional because they have default values (1
    and undefined, respectively). When passed to the page, they will be named
    "page" and "note_id".

    Also: we should probably be more formal (or more robust) about slashes on
    the end of paths. Suggestion: We should omit them from the beginning of
    paths and require that they be explicitly put on the ends of paths.

* MAYBE Add support for singleton widgets
  For example, only one recaptcha widget should appear on a page
  at a time. This is more like reference counting than counting
  the number of constructions, because once a widget is disposed,
  it's ok to construct another one.
* MAYBE automatically determine whether pages have overlapping urls (when possible)
=======
* MAYBE be consistent about event names (use present-tense everywhere?)
* MAYBE Add a widget browser
* MAYBE Cleanup core nav_item.js
                // FIXME: this is heinous
                if (spec.url && spec.url.to_string() === window.location.href) {
                    my.$().addClass('on');
                }
* MAYBE write test for templates and start on 2-pass fix
* MAYBE RPC testing harness, documentation, stub-generation, etc.
  Also: consider adding ability to un-mock single RPCs to ease backend development/integration.
* MAYBE Sex up the messaging utility, it's seriously fucking ugly right now
* MAYBE All services that provide counts should only count up a certain limit and then on front end, through a number modifier, we print something nice like "10,000+"
* MAYBE To facilitate debugging, templates should try catch and spit out their name when there is an error
* MAYBE When one template in a widget module is altered, ensure that it is the only one that is recompiled
* MAYBE Template compiler should throw a compile time error if you use a modifier that is undefined
* MAYBE Tests
* MAYBE More modifiers
  - [ ] date formatting modifier
  - [ ] ellipsis formatter

* MAYBE widgets need to have a really good documentation system

* MAYBE Add browser specific stack trace
* MAYBE Change new-proj to be able to symlink or copy juice dir.
* MAYBE Be consistent about functions that accept a single boolean to perform a toggle-action

E.g. enable = function(b)... this function sounds like it should enable the thing even called w/o an argument.
Sometimes this is what happens, sometimes it isn't. Either (1) rename to set_enabled or (2) create two functions,
enable and disable, that accept zero arguments.
* STARTED Fix issues with v8 shell
  - utf-16 write?
  - dir_exists has bug (doesn't differentiate between test for directory and file)--perhaps
  - review docs for handle scope
  - test for memory leaks
* WAITING Add build instructions for v8 shell
* DONE automatically determine whether pages have overlapping urls (when possible)
* DONE do another pass on error reporting; make sure we're using juice.error.raise correctly everywhere
* DONE revise the way decorators are defined and organized
- Rename decorators to "enhancers". E.g. that.decorate would become that.enhance.
- Enhancers should be defined within widget packages; eliminate the decorators directory.
- This would give enhancers access to compiled templates w/o additional work.
- Enhancers need not be publicly accessible except to the that.enhance method.
- Enhancers would obviously inherit the widget package's namespace.
* DONE templates blow up if you use the value a as a loop index
* DONE Decorators should add a class to the widget to facilitate styling
For example, simple_form should add the simple_form class to the widget.
* DONE fix growls
* DONE Fix dumb paginator loading of new items
* DONE Spidermonkey with file I/O

* DONE Remove dependency on template in page.js
  path_template = usul.template.parse(my.path().replace(dynamic_path_var_re, '{{$1}}'));

* DONE When we modify a dependency in our js dependencies, propagate this to scons
  scons can dynamically add dependencies based on some output from
  a javascript dependency analysis program.
* DONE Make page definition more declarative
  [19:01] graham.lowe> hey
  [19:01] graham.lowe> how do you feel about making the page defs
  more declarative
  [19:02] graham.lowe> e.g.,
  [19:02] Daniel Cowgill> i think it might be a good idea
  [19:02] graham.lowe>
  usul.page.define(
    {layout: foo.layout,
     widget_package: ['spam', 'core'],
     path: 'hello',
     params: ['username'],
     init_widgets: function(args) {...}})
  [19:03] Daniel Cowgill> yeah
  [19:03] Daniel Cowgill> i'm down with that
  [19:03] Daniel Cowgill> rpc-style
  [19:03] Daniel Cowgill> it's simpler
  [19:03] Daniel Cowgill> and there's less room for fucking shit up
  [19:03] graham.lowe> i think removing as much syntax as possible
  will be helpful.
  [19:03] Daniel Cowgill> agreed
  ---

* DONE convert all widgets to not explictly call render
* DONE Write out own growl

* DONE Remove duplication in build tests
  The files in build_tests should just call some function. This same function
  should be used to determine what js interpreter specific file to load.
* DONE Bulletin board
* DONE Reimplement bookmarking
* DONE foreach, map, any, ntimes, filter, etc. -- these guys MUST TAKE ARGS IN CONSISTENT ORDER!
* DONE Scope the proj dictionary based on dependency analysis
* DONE test in Internet Explorer and check for memory leaks
* DONE it's too easy to create infinite loops in widgets using that.on_domified + my.refresh
  For example:

        that.on_domified(
            function() {
                proj.rpcs.foo.bar(
                    rpc_args,
                    function(response) {
                        // render the widget based on response
                        my.refresh(new_representaton);
                    });
            });
* DONE Layouts should be a file, not a directory
* DONE Wrapper around interpreter specific implementations
* DONE Add some sort of history serializer so that widgets can save state across "page" changes
* DONE change all decorators to add a method with the name of the decorator and individual methods would be called via strings
* DONE private widgets (with explicit export of public widgets?)
* DONE Template macro
* DONE Real demo
  - notes compose dialog
  - notes reply
  - compose note button
  - other folders
  - ads
  - hookup minification
  - hookup CDN and other YSlow stuff
  - hookup backend
* DONE Move proj.message etc to usul.util
* DONE Wrap up this pattern
  var info = {can_be_deleted:  spec.can_be_deleted,
              blah: spec.blah};

* DONE Add a release mode to scons
* DONE Write manage.js for starting new widgets and new rpcs
* DONE new-project.js for starting a new project
* DONE Fix new-project
* DONE Error handling
  Ability to report original location of error in a concatenated
  file. One idea would be to use window.onerror and have it
  inspect some usul variable.

* DONE utility for starting new widgets
* DONE RPCs should check arguments
* DONE Do not include mocking code in shipped product
* DONE RPC spec validation might need to handle different types of responses such as pagination (e.g., dumb, total, has_next may vary), also what about no response (i.e., undefined)?
  decided that it shouldn't
* DONE Revisit util.callback and error handling [6/6]
  - [X] add compile-time linting for js files to eliminate syntax errors
  - [X] put try-catch around every script
  - [X] wrap ajax call in rpc (in set_proxy: replace proxy_fn with one that is wrapped)
  - [X] make sure mocked calls are delayed (put in their own threads) and wrapped
  - [X] juice needs to be protected from all user-space code (i.e. treat juice like a kernel)
  - [X] release-mode builds should not display info about internal errors (e.g. citations)

* DONE Figure out why remember password doesn't work
* DONE In release mode, usul.log should probably not do an alert
* DONE Fix bug in mocking
  Mock calls should not return until rpcs have started. Changing
  rpcs to execute without delays breaks everything. Try this:

  original:
  execute_with_delay(
      function() {
          var data = usul.is_function(rpc.mock) ? rpc.mock(args) : rpc.mock;
          success_fn({outcome: 'success', data: data});
      });

  to reproduce, remove the execute_with_delay.

  var data = usul.is_function(rpc.mock) ? rpc.mock(args) : rpc.mock;
  success_fn({outcome: 'success', data: data});

* DONE On lint failure, cat the log file so that we get a more informative build error
* DONE Rename project directory to proj to be consistent with namespaces
* DONE session/textarea hack is broken, doesn't save textarea between reloads, also:
  Loses "default" state on reload, which causes undefined values to be passed
  to widgets. E.g. inbox_multiview. Possible changes required to
  inbox_multiview to address this, too.

* DONE Figure out a better way to test rpcs
* DONE tabs should be able to load widgets async
* DONE Rename removable to deletable and update accordingly
* DONE fix template instantiation problem w/ internal templates
Templates assigned to juice.templates aren't working due to self-reference in compile_templates.js.
Possible solution: build juice/web the same way we build widget packages.
* DONE convert demo to have a regular project structure
  It must be a separate project under git.
  We would provide a script to symlink the juice directory to the regular juice.
* DONE automatically generate form html/template based on abstract description of form inputs
  [X] Double-click protection
  [ ] General form error label at top of form?
  [X] RPC to load data? lazy-loaded form input?
  [X] Is form input ready? and disable form until it is
  [X] Preloading a form input with values. Is this different than with ref data from an RPC?
* DONE Add facility for adding external js urls on a per widget basis at compile time
* DONE Add facility for adding help to form inputs
<<<<<<< HEAD:docs/TODO.org
* DONE Consider creating decorator packages which are used by widget packages
=======
* DONE Move pages/*.js into pages.js
* DONE Consider creating decorator packages which are used by widget packages
