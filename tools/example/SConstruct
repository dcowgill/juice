import atexit
import glob
import os
import re
import sys

def abort(message):
    print message
    sys.exit(1)

def print_build_failures():
    from SCons.Script import GetBuildFailures
    for bf in GetBuildFailures():
        if not hasattr(bf, 'node'):
            print bf
        else:
            name = str(bf.node)
            if name.endswith('.log'):
                f = open(name, 'r')
                print '\n'.join(f.readlines())
                f.close()
            else:
                print "%s failed: %s" % (bf.node, bf.errstr)

atexit.register(print_build_failures)

class BuildSettings(object):
    def __init__(self, env):
        SETTINGS_BY_MODE = {
            'debug': {
                'concatenate': False,
                'minify': False,
                'rpc_mocking': True,
            },
            'release': {
                'concatenate': True,
                'minify': True,
                'rpc_mocking': False,
            }
        }
        if not env.has_key('site'):
            abort("Variable 'site' not provided.")
        self.mode = env['mode']
        self.site = env['site']
        self.mode_settings = SETTINGS_BY_MODE[self.mode]
        self.build_dir = 'build/%s/%s' % (self.site, self.mode)
        self.proj_filename = 'proj/settings/%s.js' % self.site
        if not os.path.isfile(self.proj_filename):
            abort("Settings file '%s' not found." % self.proj_filename)
        self.htdocs_dir = os.path.join(self.build_dir, 'htdocs')
        self.filename = os.path.join(self.build_dir, 'build_settings.js')

    def __getattr__(self, name):
        return self.mode_settings[name]

    def make_build_path(self, path):
        return os.path.join(self.build_dir, path)

    def make_htdocs_path(self, path):
        return os.path.join(self.htdocs_dir, path)

    def to_dict(self):
        result = self.mode_settings
        result['mode'] = self.mode
        result['site'] = self.site
        result['build_dir'] =  self.build_dir
        result['htdocs_dir'] = self.htdocs_dir
        result['filename'] = self.filename
        result['proj_filename'] = self.proj_filename
        return result

    def to_json(self):
        return self.__json(self.to_dict())

    def __json(self, val):
        if type(val) is str:
            return "'%s'" % val.replace("'", "\\'").replace("\n", "\\n")
        if type(val) is list:
            return "[" + ",".join([self.__json(v) for v in val]) + "]"
        if type(val) is dict:
            pairs = ["'%s':%s" % (k, self.__json(v)) for k, v in val.iteritems()]
            return "{" + ",".join(pairs) + "}"
        if type(val) is bool:
            if (val):
                return "true"
            else:
                return "false"
        return str(val)

vars = Variables()
vars.AddVariables(
    EnumVariable('mode', 'build mode', 'debug', allowed_values=('debug', 'release')),
    ('site', "site id (e.g. 'foo' in 'proj/settings/foo.js')"))
env = Environment(variables = vars,
                  ENV = {'HOME': os.environ['HOME'],
                         'PATH': os.environ['PATH'],
                         'USER': os.environ['USER']})
Help(vars.GenerateHelpText(env))
bs = BuildSettings(env)

def check_v8(context):
    context.Message('Checking for v8...')
    cmd = 'js juice/tools/build_tests/v8.js'
    result = os.system(cmd + ' >/dev/null 2>&1') == 0
    context.Result(result)
    return result

def check_spidermonkey(context):
    context.Message('Checking for spidermonkey...')
    cmd = 'js juice/tools/build_tests/spidermonkey.js'
    result = os.system(cmd + ' >/dev/null 2>&1') == 0
    context.Result(result)
    return result

def check_rhino(context):
    context.Message('Checking for rhino...')
    cmd = 'java -jar juice/ext/tools/js.jar juice/tools/build_tests/rhino.js'
    result = os.system(cmd + ' >/dev/null 2>&1') == 0
    context.Result(result)
    return result

def js_v8(cmd):
    return 'js %s' % cmd

def js_spidermonkey(cmd):
    return 'js %s' % cmd

def js_rhino(cmd):
    return 'java -jar juice/ext/tools/js.jar -version 150 %s' % cmd

conf = Configure(env, custom_tests = {'check_v8': check_v8,
                                      'check_spidermonkey': check_spidermonkey,
                                      'check_rhino': check_rhino})

should_lint = False
if conf.check_v8():
    js = js_v8
    should_lint = True
elif conf.check_spidermonkey():
    js = js_spidermonkey
    should_lint = True
elif conf.check_rhino():
    js = js_rhino
else:
    abort('JavaScript interpreter not found.')

env = conf.Finish()

def js_tool(program_name, rest=""):
    return js("juice/tools/%s.js %s %s" % (program_name, bs.filename, rest))

js_file_re = re.compile('/[^/.][^/]*[.]js$')

def glob_dirs(wildcard):
    return [d for d in glob.glob(wildcard) if os.path.isdir(d)]

def glob_js(dir):
    return [f for f in sorted(glob.glob(dir + '/*')) if js_file_re.search(f)]

def glob_js_prelude_first(dir):
    return ([dir + '/prelude.js'] + [n for n in glob_js(dir) if os.path.basename(n) != 'prelude.js'])

def glob_js_recursive(dir, ignore_dir=None):
    answer = []
    for root, dirs, files in os.walk(dir):
        if ignore_dir and root.find('/' + ignore_dir) != -1:
            continue
        if root.find('/build/') == -1 and root.find('/ext/') == -1:
            for f in files:
                if f.endswith('.js'):
                    answer.append(root + '/' + f)
    return answer


def create_settings_js(target, source, env):
    f = open(str(target[0]), 'w')
    f.write('juice.build_settings=' + bs.to_json() + ';');
    f.close();

env.Append(BUILDERS = {
    'cat_js': Builder(action = js_tool('cat_js_files', '$TARGET $SOURCES')),
    'cat_scoped_js': Builder(action = js_tool('scope_js_files', '$TARGET $SOURCES')),
    'minify': Builder(action = 'java -jar juice/ext/tools/yuicompressor-2.3.5.jar --type js -o $TARGET < $SOURCES'),
    'pages_deps': Builder(action = js_tool('list_pages_deps', '$SOURCE > $TARGET')),
    'pages_log': Builder(action = js_tool('compile_pages', '$SOURCE $TARGET')),
    'lint_log': Builder(action = js_tool('lint', '$SOURCE > $TARGET')),
    'lint_page_paths_log': Builder(action = js_tool('lint_page_paths', '$SOURCE > $TARGET')),
    'settings_js': Builder(action = create_settings_js),
    })

def compile_templates(env, lhs, target, sources):
    cmd = js_tool('compile_templates', '"%s" $TARGET $SOURCES' % lhs)
    return env.Command(target, sources, cmd)

env.AddMethod(compile_templates, 'templates')

def compile_proj_settings(env):
    return env.Command(bs.make_htdocs_path('js/proj/settings.js'),
                       bs.proj_filename,
                       js_tool('compile_proj_settings', '> $TARGET'))

env.AddMethod(compile_proj_settings, 'proj_settings')

def compile_proj_base(env):
    templates = env.templates('var templates',
                              bs.make_build_path('tmp/proj/web/prelude/templates.js'),
                              glob.glob('proj/prelude/templates/*.html'))
    target = bs.make_htdocs_path('js/proj/base.js')
    cmd = js_tool('list_proj_base_files', bs.proj_filename)
    sources = os.popen(cmd).read().rstrip().split("\n")
    sources.append(bs.make_htdocs_path('js/proj/settings.js'))
    sources.append(templates)
    return env.cat_scoped_js(target, sources)

env.AddMethod(compile_proj_base, 'proj_base')

def build_widget_package(env, package_name):
    template_file = bs.make_build_path('tmp/proj/templates/%s.js' % package_name)
    html_files = sorted(glob.glob('proj/widgets/%s/templates/*.html' % package_name))
    template = env.templates('var templates', template_file, html_files)

    package_file = bs.make_htdocs_path('js/proj/widgets/%s.js' % package_name)
    package_sources = sorted(glob.glob('proj/widgets/%s/*.js' % package_name)) + template
    action = js_tool('compile_widget_package', package_name)
    package = env.Command(package_file, package_sources, action)
    env.Depends(package, 'proj/widgets/%s/package.js' % package_name)
    env.Depends(package, 'juice/tools/compile_widget_package.js')
    return package

env.AddMethod(build_widget_package, 'widget_package')

def compile_web(env, target, sources):
    templates = env.templates('var templates',
                              bs.make_build_path('tmp/juice/web/builtin_templates.js'),
                              glob.glob('juice/web/templates/*.html'))
    action_args = [target, templates[0].get_abspath()] + sources
    action = js_tool('compile_web', " ".join(action_args))
    web = env.Command(target, sources + templates, action)
    env.Depends(web, templates)
    return web


env.AddMethod(compile_web,'compile_web')


def build_rpc_package(env, package_name):
    package_file = bs.make_htdocs_path('js/proj/rpcs/%s.js' % package_name)
    package_sources = sorted(glob.glob('proj/rpcs/%s/*.js' % package_name))
    if bs.rpc_mocking:
        package_sources = package_sources + sorted(glob.glob('proj/rpcs/%s/mock/*.js' % package_name))
    action_args = [package_name, package_file] + package_sources
    action = js_tool('compile_rpc_package', " ".join(action_args))
    package = env.Command(package_file, package_sources, action)
    env.Depends(package, 'juice/tools/compile_rpc_package.js')
    return package

env.AddMethod(build_rpc_package, 'rpc_package')

def compile_html_pages(env, filename):
    node = env.pages_log(bs.make_build_path('tmp/%s.log' % filename), filename)
    env.Depends(node, bs.proj_filename)
    env.Depends(node, 'juice/tools/compile_pages.js')
    env.Depends(node, 'juice/tools/templates/page.html')
    deps = env.pages_deps(bs.make_build_path('tmp/%s.deps' % filename), filename)
    env.Depends(node, env.AlwaysBuild(deps))
    return node

env.AddMethod(compile_html_pages, 'html_pages')

def lint_js(env, filename):
    node = env.lint_log(bs.make_build_path('tmp/lint/%s.log/' % filename), filename)
    env.Depends(node, 'juice/tools/lint.js')
    return node

env.AddMethod(lint_js, 'lint_js')



#
#
#



ext_js = env.cat_js(bs.make_htdocs_path('js/ext/web.js'), glob_js('juice/ext/web'))

web_js = env.compile_web(bs.make_htdocs_path('js/juice/web.js'), glob_js_prelude_first('juice/web'))

settings = env.settings_js(bs.filename, bs.proj_filename)

proj_js = env.proj_base()
env.Depends(proj_js, settings)

proj_settings = env.proj_settings()

if should_lint:
    for f in glob_js_recursive('juice'):
        env.lint_js(str(f))
    for f in glob_js_recursive('proj'):
        env.lint_js(str(f))

for d in glob_dirs('proj/rpcs/*'):
    env.rpc_package(os.path.basename(d))

for d in glob_dirs('proj/widgets/*'):
    env.widget_package(os.path.basename(d))

env.html_pages('proj/pages.js')

env.lint_page_paths_log(bs.make_build_path('tmp/lint_page_paths.log'),
                        glob_js('proj/pages'))

SConscript('proj/SConscript', exports='env bs')
